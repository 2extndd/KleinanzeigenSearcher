#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram Bot –¥–ª—è Kleinanzeigen Scanner
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import subprocess
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import KleinanzeigenConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

LOG_FILE = "kleinanzeigen_scanner.log"
SCANNER_SCRIPT = "kleinanzeigen_scanner.py"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    help_text = """
ü§ñ <b>Kleinanzeigen Scanner Bot</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status2 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
/threadid2 - –ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–æ–ø–∏–∫–æ–≤
/restart2 - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
/log2 - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞

<i>–ë–æ—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç Kleinanzeigen.de –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.</i>
    """
    await update.message.reply_text(help_text, parse_mode='HTML')

async def show_threadid2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–æ–ø–∏–∫–æ–≤"""
    try:
        thread_text = "üéØ <b>ID —Ç–æ–ø–∏–∫–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n\n"
        for name, config in KleinanzeigenConfig.topics.items():
            thread_text += f"‚Ä¢ <b>{name}</b>\n"
            thread_text += f"  Thread ID: <code>{config['thread_id']}</code>\n"
            thread_text += f"  –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {config.get('summary_count', 5)}\n\n"
        
        await update.message.reply_text(thread_text, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def show_log2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞"""
    try:
        if os.path.exists(LOG_FILE):
            with open(LOG_FILE, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
                last_lines = lines[-20:] if len(lines) >= 20 else lines
                log_text = ''.join(last_lines)
                
            if log_text:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                import html
                log_text = html.escape(log_text)
                
                message = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:</b>\n\n<pre>{log_text}</pre>"
                if len(message) > 4000:
                    message = message[:4000] + "...\n<i>[–æ–±—Ä–µ–∑–∞–Ω–æ]</i>"
                await update.message.reply_text(message, parse_mode='HTML')
            else:
                await update.message.reply_text("üìã –õ–æ–≥ —Ñ–∞–π–ª –ø—É—Å—Ç")
        else:
            await update.message.reply_text("‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def show_status2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
    try:
        scanner_running = False
        try:
            result = subprocess.run(["pgrep", "-f", SCANNER_SCRIPT], capture_output=True, text=True)
            scanner_running = bool(result.stdout.strip())
        except:
            pass
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∞
        log_lines = 0
        if os.path.exists(LOG_FILE):
            try:
                with open(LOG_FILE, 'r') as f:
                    log_lines = sum(1 for _ in f)
            except:
                pass
        
        status_text = f"""
üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å Kleinanzeigen Scanner</b>

ü§ñ –°–∫–∞–Ω–µ—Ä: {'üü¢ –ó–∞–ø—É—â–µ–Ω' if scanner_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìÑ –õ–æ–≥ —Ñ–∞–π–ª: {'üü¢ –ù–∞–π–¥–µ–Ω' if os.path.exists(LOG_FILE) else 'üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω'}
‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'üü¢ –ù–∞–π–¥–µ–Ω–∞' if os.path.exists("KleinanzeigenConfig.py") else 'üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üìù –°—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ: {log_lines}
üîß –¢–æ–ø–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(KleinanzeigenConfig.topics)}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /restart2 –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        """
        await update.message.reply_text(status_text, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def restart_scanner2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
    try:
        await update.message.reply_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        
        try:
            subprocess.run(["pkill", "-f", "kleinanzeigen"], check=False)
            await update.message.reply_text("‚ö†Ô∏è –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except:
            pass
        
        import time
        time.sleep(2)
        
        subprocess.Popen(["python3", SCANNER_SCRIPT])
        await update.message.reply_text("‚úÖ –°–∫–∞–Ω–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    if "Conflict" in str(context.error):
        logger.error("Bot conflict detected - another instance may be running")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ Kleinanzeigen Telegram Bot –∑–∞–ø—É—â–µ–Ω!")
    logger.info("Kleinanzeigen Telegram Bot started")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        print(f"üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...")
        import requests
        url = f'https://api.telegram.org/bot{KleinanzeigenConfig.telegram_bot_token}/getMe'
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if not data.get('ok'):
            raise Exception(f"–¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('description')}")
            
        bot_info = data.get('result', {})
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username')}")
        logger.info(f"Bot connected: @{bot_info.get('username')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
        logger.error(f"Telegram connection error: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    print("üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞...")
    application = Application.builder().token(KleinanzeigenConfig.telegram_bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("threadid2", show_threadid2))
    application.add_handler(CommandHandler("log2", show_log2))
    application.add_handler(CommandHandler("status2", show_status2))
    application.add_handler(CommandHandler("restart2", restart_scanner2))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
    logger.info("Starting bot polling...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    async def send_startup_notification():
        try:
            from telegram import Bot
            bot = Bot(token=KleinanzeigenConfig.telegram_bot_token)
            await bot.send_message(
                chat_id=KleinanzeigenConfig.telegram_chat_id,
                text="ü§ñ Kleinanzeigen Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status2 - —Å—Ç–∞—Ç—É—Å\n/log2 - –ª–æ–≥–∏\n/threadid2 - —Ç–æ–ø–∏–∫–∏\n/restart2 - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
            )
            await bot.close()
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    import asyncio
    try:
        asyncio.run(send_startup_notification())
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    try:
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        )
    except Exception as e:
        logger.error(f"Bot error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()
